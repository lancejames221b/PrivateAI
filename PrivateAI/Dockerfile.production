FROM python:3.9-slim AS builder

# Set working directory
WORKDIR /app

# Install system dependencies for building
RUN apt-get update && apt-get install -y --no-install-recommends \
    libffi-dev \
    openssl \
    curl \
    gcc \
    g++ \
    make \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY requirements.txt requirements-privacy.txt ./

# Install dependencies into a virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt -r requirements-privacy.txt && \
    pip install --no-cache-dir gunicorn waitress

# Second stage: runtime image
FROM python:3.9-slim

# Create non-root user
RUN groupadd -g 1000 appuser && \
    useradd -u 1000 -g appuser -s /bin/bash -m appuser

# Set working directory
WORKDIR /app

# Install runtime dependencies only
RUN apt-get update && apt-get install -y --no-install-recommends \
    openssl \
    curl \
    tini \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy application code
COPY --chown=appuser:appuser . .

# Create directories and set permissions
RUN mkdir -p data logs && \
    chown -R appuser:appuser /app

# Expose ports for the admin panel and proxy
EXPOSE 7070 8080 8081

# Set environment variables
ENV FLASK_APP=run_app.py
ENV FLASK_ENV=production
ENV PYTHONUNBUFFERED=1
ENV PROXY_PORT=8080
ENV HEALTH_PORT=8081
ENV ENABLE_HEALTH_CHECK=true
ENV ENABLE_RATE_LIMITING=true

# Create production entrypoint script
RUN echo '#!/bin/bash\n\
echo "Starting AI Security Proxy in Production Mode..."\n\
\n\
# Load environment variables from .env if it exists\n\
if [ -f .env ]; then\n\
  export $(grep -v "^#" .env | xargs)\n\
fi\n\
\n\
# Set default values\n\
WORKERS=${WORKERS:-4}\n\
TIMEOUT=${TIMEOUT:-120}\n\
MAX_REQUESTS=${MAX_REQUESTS:-1000}\n\
\n\
case "$1" in\n\
  "admin")\n\
    echo "Starting Admin Interface on port 7070..."\n\
    exec waitress-serve --port=7070 --host=0.0.0.0 --threads=$WORKERS --connection-limit=1000 --url-scheme=http run_app:app\n\
    ;;\n\
  "proxy")\n\
    echo "Starting AI Security Proxy on port $PROXY_PORT..."\n\
    exec python ai_proxy.py\n\
    ;;\n\
  "health")\n\
    echo "Checking health status..."\n\
    curl -s http://localhost:$HEALTH_PORT/health\n\
    ;;\n\
  *)\n\
    echo "Starting both services..."\n\
    python ai_proxy.py & \n\
    waitress-serve --port=7070 --host=0.0.0.0 --threads=$WORKERS --connection-limit=1000 --url-scheme=http run_app:app\n\
    ;;\n\
esac' > /app/docker-entrypoint.sh && chmod +x /app/docker-entrypoint.sh

# Switch to non-root user
USER appuser

# Use tini as init system
ENTRYPOINT ["/usr/bin/tini", "--", "/app/docker-entrypoint.sh"]

# Default command
CMD ["admin"]

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8081/health || exit 1